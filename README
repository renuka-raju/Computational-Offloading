----------------------------README---------------------------------
a. Name ; Renuka Raju
b. Student ID : 7665328557

c. Assignment Core:
	I have implemented a computational offloading model to calculate the end to end delay of a given link- the model encompasses an aws server, 2 database servers, a computational server and a monitor to display the results. I have completed the project phase by phase and used the port number and protocol specifications from the project description.

	The client can request the server by giving an id to the link, file size and signal power. The aws server will then query the backend server A and B for information about this link. If the backend servers A and B have details of the link in their respective databases, they return them to the aws server. aws server send these details to the computational server c - server C caluclates the transmission delay, propagation delay and end-to-tnd delay for the link with given parameters and then returns it to the aws server. Now, aws server returns the results to the client. The aws server sends information to the monitor to display the link query obtained from the client and the results obtained from the backend server C.

d. Source code files:
	
	serverA.c :
	----------
	Backend server A boots up, creates and binds itself to the UDP socket <LOCALHOST,21557>
	It receives request from the aws server containing <LINK_ID>
	Server A now looks up this <LINK_ID> in its database and returns the link information if the link id is found, otherwise returns that the link is not found
	Backend server A keeps running until the user terminates it

	serverB.c :
	----------
	Backend server B boots up, creates and binds itself to the UDP socket <LOCALHOST,22557>
	It receives request from the aws server containing <LINK_ID>
	Server B now looks up this <LINK_ID> in its database and returns the link information if the link id is found, otherwise returns that the link is not found
	Backend server B keeps running until the user terminates it

	serverC.c :
	----------
	Backend server C boots up, creates and binds itself to the UDP socket <LOCALHOST,23557>
	It receives request from the aws server containing <LINK_ID>, the query from the client and data it received from database servers
	Server C computes the following:
		1. Propagation delay = <link length>/<velocity>
		2. Signal power in watts from dBm
		3. Noise power in watts from dBm
		4. Signal to Noise ratio
		5. Channel capacity as transmission rate using the Shanon's channel capacity formula
		6. Transmission delay = <filesize>/<transmission_rate>
		7. End-to-end delay = Transmission delay + Propagation delay 
	Server C returns the details of the delay to aws server
	Backend server C keeps running until the user terminates it

	aws :
	-----
	aws server acts as the central component coordinating with client and the backend servers
	It boots up binds to 2 TCP sockets - one for the client and one for the monitor (25557 & 26557)
	When the monitor and client connect to theier respective sockets, aws accepts connection from them
	Every time the client tries to connect to the aws, it creates a child socket and further communication of results happen in this socket, it also pushes the request details to the monitor over TCP
	The aws gets the link_id, file_size and noise_power from the client
	The aws creates a UDP socket binds to it and sends requests to the database servers for a particular link_id
	When it gets the details of the link from the database servers, it sends this information to the compute server C and gets the delay information 
	I tnow sends the en-to-end delay to the client over TCP and detailed results to the monitor over TCP as well
	aws server runs until the user terminates it

	monitor:
	--------
	monitor is used to display the messages sent by the aws server.
	It boots up and dynamically connects to the aws server at 26557 
	This server keeps receiving messgaes about link details and end-to-end delays from the aws server everytime a new client requests and results are gnerated at the aws server
	monitor runs until the user terminates it or until the aws server is down

	client:
	-------
	Client boots up, dynamically connects to the aws server at 26557
	Client send the query <link_id>, <file_size> and <signal_power> to the aws server
	It waits until it gets the response from aws server and terminte

e. The format of all the messages exchanged 
---------------------------------------------
	Backend server A & B:
	----------------------
	The Server <#> received input <3>
	The Server <#> has found < 1 > matches
	The Server <#> finished sending the output to AWS

	Compute Server C:
	-----------------
	The Server C received link information of link <3>, file size <10000>, and signal power <10>
	The Server C finished the calculation for link <3>
	The Server C finished sending the output to AWS

	AWS:
	---
	The AWS received link ID=<3>, size=<10000>, and power=<10> from the client using TCP over port <25319>
	The AWS sent link ID=<3>, size=<10000>, and power=<10> to the monitor using TCP over port <26319>
	The AWS sent link ID=<3> to Backend-Server A using UDP over port < 24319 >
	The AWS sent link ID=<3> to Backend-Server B using UDP over port < 28319 >
	The AWS received < 1 > matches from Backend-Server < A > using UDP over port < 24319 >
	The AWS received < 0 > matches from Backend-Server < B > using UDP over port < 28319 >
	The AWS sent link ID=<3>, size=<10000>, power=<10>, and link information to Backend-Server C using UDP over port < 27319 >
	The AWS received outputs from Backend-Server C using UDP over port < 27319 >
	The AWS sent delay=<10>ms to the client using TCP over port < 25319 >
	The AWS sent detailed results to the monitor using TCP over port <26319> The AWS sent No Match to the monitor and the client using TCP over ports <25319> and <26319>, respectively	

	Client:
	-------
	The client sent link ID=<3>, size=<10000>, and power=<10> to AWS 
	The delay for link <3> is <10>ms

	Monitor:
	--------
	The monitor received input=<3>, size=<10000>, and power=<10> from the AWS
	The result for link <3>:
	Tt = <3>ms
	Tp = <7>ms
	Delay = <10>ms Found no matches for link <4>

	Mostly arrays, structs and sometimes individual floats/ints/char* are exchanged

f.idiosyncrasy:
	-------------
	Project executes fine as long as the make files are called in the specific order as in the HW descritpion
	There are no failures after testing with different inputs in the VM

h.Reused Code:
	------------
	I have not copied the code exactly from anywhere but I have used pieces from the following for connections setups in TCP and UDP
	http://www.beej.us/guide/bgnet/html/single/bgnet.html#clientserver
	https://www.cs.rutgers.edu/~pxk/rutgers/notes/sockets/*/


